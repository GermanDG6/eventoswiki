---
import { Button } from '../../core/components/atoms/button/button'
import { GradientTitle } from '../../core/components/atoms/gradient-title/gradient-title'
import { Link } from '../../core/components/atoms/link/link'
import EventsGrid from '../../core/components/organisms/events-grid/events-grid.astro'
import type { AstroEvent } from '../../core/events/astro-event'
import { EventUtils } from '../../core/events/event-utils'
import Layout from '../../layouts/layout.astro'

const EVENTS_PER_PAGE = 12
const events = (await Astro.glob('../eventos/**/*.mdx')) as AstroEvent[]

const searchParams = new URL(Astro.request.url).searchParams
const tags = searchParams.getAll('tag')

const eventsFiltered = EventUtils.getNextEvents(events, { tags })

const eventsSortered = EventUtils.sortByStartDateAsc(eventsFiltered)

const pageParam = Astro.params.page
const pageNumber = pageParam ? parseInt(pageParam) : 1

const pageEvents = eventsSortered.slice((pageNumber - 1) * EVENTS_PER_PAGE, pageNumber * EVENTS_PER_PAGE)
const nextPage = eventsSortered.length > pageNumber * EVENTS_PER_PAGE ? `/eventos/${pageNumber + 1}` : null
const prevPage = pageNumber > 1 ? `/eventos/${pageNumber - 1}` : null

const eventsAux = EventUtils.getNextEvents(events)
const tagsEvents = EventUtils.getTagsEvents(eventsAux)

function getLink(tag: string) {
  const url = new URL(Astro.request.url)
  if (tags.includes(tag)) {
    url.searchParams.delete('tag')
  } else {
    url.searchParams.append('tag', tag)
  }
  return url.toString()
}
---

<Layout title="eventos.wiki - Pr칩ximos eventos">
  <div class="flex items-center justify-between mt-4 mb-2">
    <GradientTitle>Pr칩ximos eventos</GradientTitle>
    <Link href="/eventos/archivados/1" className="text-right">Ver pasados</Link>
  </div>
  <section class="flex flex-wrap gap-1 mb-8">
    {
      tagsEvents.map(tag => (
        <a
          href={getLink(tag)}
          class={`inline-flex items-center px-3 py-1.5 leading-none w-auto rounded-full text-xs font-bold uppercase border hover:bg-gray-200 ${
            tags.includes(tag) && 'bg-gray-200'
          }`}
        >
          {tag}
        </a>
      ))
    }
  </section>
  <EventsGrid events={pageEvents} />
  <div class="flex justify-between mt-8">
    {
      prevPage ? (
        <Button type="link" variant="text" href={prevPage}>
          P치gina anterior
        </Button>
      ) : (
        <div />
      )
    }
    {
      nextPage && (
        <Button type="link" href={nextPage}>
          Siguiente p치gina
        </Button>
      )
    }
  </div>
</Layout>
