---
import type { MarkdownLayoutProps } from 'astro'
import { Container } from '../core/components/atoms/container/container'
import { Link } from '../core/components/atoms/icons/link'
import { MapPin } from '../core/components/atoms/icons/map-pin'
import { Tag } from '../core/components/atoms/tag/tag'
import BaseHead from '../core/components/base-head.astro'
import { AddToCalendarButton } from '../core/components/molecules/add-to-calendar-button/add-to-calendar-button'
import { EventDatePeriod } from '../core/components/molecules/event-date-period/event-date-period'
import { SocialLink } from '../core/components/molecules/social-link/social-link'
import Footer from '../core/components/organisms/footer/footer.astro'
import Header from '../core/components/organisms/header/header.astro'
import { Datetime } from '../core/datetime/datetime'
import type { Event } from '../core/events/event'

type Props = MarkdownLayoutProps<Event>

const { frontmatter, url } = Astro.props
const {
  title,
  shortDescription,
  image,
  tags,
  tagColor,
  altImage,
  startDate,
  endDate,
  twitter,
  twitch,
  instagram,
  youtube,
  linkedin,
  github,
  web,
  location,
} = frontmatter
---

<!doctype html>
<html lang="es">
  <BaseHead
    title={`${title} - eventos.wiki`}
    description={shortDescription}
    image={image}
    url={`https://eventos.wiki${url}`}
  />
  <body>
    <Header />
    <div class="relative h-72 bg-indigo-900">
      <img
        id="event-image"
        src={image}
        alt={altImage || `Foto de portada del evento ${title}`}
        class="absolute w-full h-full object-cover shadow-md bg-white"
        loading="lazy"
        onerror="this.src='/not-found.jpg'"
      />
      <div class="absolute w-full h-52 bottom-0 bg-gradient-to-t from-black"></div>
      <div class="absolute w-full bottom-0 px-6 py-4 max-w-5xl left-0 right-0 ml-auto mr-auto xl:px-0">
        <div class="flex items-center gap-2">
          {tags.map((t: string) => <Tag color={tagColor}>{t}</Tag>)}
        </div>
        <h1 class="text-4xl font-medium text-white" tabindex={0}>
          {title}
        </h1>
        <EventDatePeriod startDate={startDate} endDate={endDate} client:load />
        {
          web && (
            <div class="flex items-center gap-1">
              <Link color="white" size="1.2rem" />
              <a
                href={web}
                target="_blank"
                rel="nofollow"
                class="text-sm text-white"
                aria-label={`Link al evento ${title}`}
              >
                {web}
              </a>
            </div>
          )
        }
        {
          location && (
            <div class="flex items-center gap-1">
              <MapPin color="white" size="1.25rem" />
              <p class="text-sm text-white py-2" tabindex="0" aria-label={`LocalizaciÃ³n del evento: ${location}`}>
                {location}
              </p>
            </div>
          )
        }
      </div>
      <div class="absolute -bottom-5 px-6 flex justify-end gap-1 max-w-5xl left-0 right-0 ml-auto mr-auto xl:px-0">
        {twitter && <SocialLink name={title} href={twitter} type="twitter" />}
        {twitch && <SocialLink name={title} href={twitch} type="twitch" />}
        {instagram && <SocialLink name={title} href={instagram} type="instagram" />}
        {youtube && <SocialLink name={title} href={youtube} type="youtube" />}
        {linkedin && <SocialLink name={title} href={linkedin} type="linkedin" />}
        {github && <SocialLink name={title} href={github} type="github" />}
      </div>
    </div>
    <main class="mt-4">
      <Container maxSize="m" className="event-container">
        <slot />
      </Container>
      <div class="sticky bottom-2 w-full text-center p-4">
        <AddToCalendarButton
          client:load
          title={title}
          description={shortDescription}
          startDate={Datetime.toDateIsoString(startDate!)}
          endDate={Datetime.toDateIsoString(endDate!)}
          startTime={Datetime.toTimeIsoString(startDate!)}
          endTime={Datetime.toTimeIsoString(endDate!)}
          location={location}
        />
      </div>
    </main>
    <Footer />

    <style>
      body {
        @apply m-0 grid min-h-full grid-rows-[auto_auto_1fr_auto] bg-background text-foreground dark:bg-background-dark dark:text-foreground-dark;
      }
    </style>
    <style is:global>
      html {
        font-family: system-ui, sans-serif;
        font-size: var(--font-size-base);
        height: 100%;
      }

      p,
      span {
        @apply text-xl text-gray-900 dark:text-gray-50;
      }

      small {
        @apply text-sm text-gray-900 dark:text-gray-50;
      }

      h2,
      h3,
      h4,
      h5,
      h6 {
        @apply !font-bold;
      }

      h2 {
        @apply py-4 !text-3xl text-slate-900 dark:text-gray-200;
      }

      h3 {
        @apply py-3 !text-2xl text-slate-900 dark:text-gray-200;
      }

      p {
        @apply py-4;
      }

      table {
        @apply mb-10;
      }

      table tr {
        @apply border-b dark:border-b-gray-50;
      }

      table td {
        @apply p-4 text-gray-900 dark:text-gray-50;
      }

      table th {
        @apply p-4 !text-gray-900 dark:!text-gray-50;
      }

      ol,
      ul {
        @apply p-4 font-sans text-base;
      }

      ol {
        @apply list-decimal;
      }

      ul {
        @apply list-disc;
      }

      ul li {
        @apply mb-2 !text-lg text-slate-900 dark:text-gray-200;
      }

      ol li {
        @apply mb-2 !text-lg text-slate-900 dark:text-gray-200;
      }

      .event-container a {
        @apply underline;
      }
    </style>
  </body>
</html>
